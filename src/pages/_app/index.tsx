import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { yupResolver } from '@hookform/resolvers/yup';
import { createFileRoute, useNavigate } from '@tanstack/react-router';
import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';

import * as yup from 'yup';

import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from '@/components/ui/form';
import {
	LineItem,
	OrderStatus,
	PaymentMethod,
	PaymentStatus,
	ProductPagination,
} from '@/gql/graphql';
import { gqlRequest } from '@/lib/api-client';
import { trackEvent } from '@/lib/fbPixel';
import { useMutation, useQuery } from '@tanstack/react-query';
import { Loader2 } from 'lucide-react';
import toast from 'react-hot-toast';
import { All_Products_Query, Place_Order_Mutation } from './~query.gql/query';
// @ts-ignore
import 'swiper/css';
import Header from './~module/components/Header';
import PriceAndReview from './~module/components/PriceAndReview';
import ProductDetails from './~module/components/ProductDetails';
import VideoAndHeading from './~module/components/VideoAndHeading';

export const Route = createFileRoute('/_app/')({
	component: RouteComponent,
});

function RouteComponent() {
	const [productData, setProductData] = useState<ProductDataType>();
	const navigate = useNavigate();

	const form = useForm<FormValues>({
		// @ts-ignore
		resolver: yupResolver(schema),
		defaultValues: {
			name: '',
			phone: '',
			address: '',
			quantity: 1,
			code: '',
			specialNote: '', // üëà now optional
		},
	});

	const placeOrder = useMutation({
		mutationFn: async (payload: any) => {
			await gqlRequest({
				query: Place_Order_Mutation,
				variables: payload,
			});

			trackEvent('Purchase', {
				value: payload?.payload?.total,
				currency: 'BDT',
				content_ids: [productFetchedData?._id],
				contents: payload?.payload?.items?.map((item: LineItem) => ({
					code: item?.code,
					quantity: item?.quantity,
					item_price: item?.price,
					id: item?.product,
				})),
			});
		},
		onSuccess(data) {
			toast.success('Order has been placed.');
			// @ts-ignore
			navigate({ to: `/order-success?orderId=${data?.placeOrder?._id}` });
		},
	});

	const { data: productFetchedData } = useQuery({
		queryKey: ['All_Products_Query'],
		queryFn: async () => {
			const res = await gqlRequest<{ products: ProductPagination }>({
				query: All_Products_Query,
				variables: {
					orgUid: import.meta.env.VITE_APP_ORGANIZATION_UID,
				},
			});
			return res?.products?.nodes?.[0];
		},
	});

	// ‚úÖ submit handler
	const onSubmit = (data: FormValues) => {
		const productPrice = priceByQuantity(data?.quantity, productData!);

		const payload = {
			payload: {
				items: [
					{
						product: productFetchedData?._id,
						price: productPrice,
						quantity: data?.quantity,
						code: data?.code,
						subtotal: productPrice,
					},
				],
				status: OrderStatus.Pending,
				billing: {
					name: data?.name,
					phone: data?.phone,
					address: data?.address,
				},
				specialNote: data?.specialNote,
				total: productPrice,
				deliveryFee: 0,
				payment: {
					amount: productPrice,
					method: PaymentMethod.CashOnDelivery,
					status: PaymentStatus.Due,
				},
				orgUID: import.meta.env.VITE_APP_ORGANIZATION_UID,
			},
		};
		placeOrder?.mutate(payload);
	};

	useEffect(() => {
		fetch(
			'https://raw.githubusercontent.com/MHRafix/rihla-mart-data/main/data.json'
		)
			.then((res) => res.json())
			.then((data) => {
				setProductData(data);
			})
			.catch((err) => console.error(err));
	}, []);

	return (
		<div className='bg-white text-purple-950 min-h-screen'>
			<Header productData={productData!} />
			<main className='space-y-12'>
				<VideoAndHeading />

				<PriceAndReview productData={productData!} />

				<ProductDetails productData={productData!} />

				<section className='text-center py-6 px-4 font-bold text-white bg-purple-950 rounded-xl mx-4'>
					<p className='text-md text-amber-500 leading-12'>‚úÖ ‡ß® ‡¶™‡¶ø‡¶∏ ‡ßß‡ß≠‡ß¶‡ß¶</p>
					<p className='text-md text-amber-500 leading-12'>‚úÖ ‡ß© ‡¶™‡¶ø‡¶∏ ‡ß®‡ß™‡ß´‡ß¶</p>
					<p className='text-md text-amber-500 leading-12'>‚úÖ ‡ß™ ‡¶™‡¶ø‡¶∏ ‡ß©‡ß®‡ß¶‡ß¶</p>

					<h2 className='mt-3 text-lg font-medium bg-amber-800 p-2 rounded-xl'>
						‚úÖ ‡¶™‡¶æ‡¶á‡¶ï‡¶æ‡¶∞‡¶ø ‡¶®‡¶ø‡¶§‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® {productData?.whatsappNumber}
					</h2>
				</section>

				<section className='mx-4 py-3'>
					<Card className='bg-white text-purple-950 border shadow-sm mx-auto'>
						<CardContent className='px-4 space-y-4'>
							<h3 className='text-2xl font-bold text-center'>
								‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶ñ‡¶®‡¶á
							</h3>

							<Form {...form}>
								<form // @ts-ignore
									onSubmit={form.handleSubmit(onSubmit)}
									className='space-y-4'
								>
									{/* Name */}
									<FormField // @ts-ignore
										control={form.control}
										name='name'
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ <span className='text-red-500'>*</span>
												</FormLabel>
												<FormControl>
													<Input
														placeholder='‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ'
														{...field}
														className='py-6'
														disabled={placeOrder.isPending}
													/>
												</FormControl>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Phone */}
									<FormField // @ts-ignore
										control={form.control}
										name='phone'
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ <span className='text-red-500'>*</span>
												</FormLabel>
												<FormControl>
													<Input
														placeholder='‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞'
														{...field}
														className='py-6'
														disabled={placeOrder.isPending}
													/>
												</FormControl>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Address */}
									<FormField // @ts-ignore
										control={form.control}
										name='address'
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ - (‡¶ú‡ßá‡¶≤‡¶æ, ‡¶•‡¶æ‡¶®‡¶æ, ‡¶™‡ßã‡¶∏‡ßç‡¶ü/‡¶á‡¶â‡¶®‡¶ø‡ßü‡¶®, ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ)
													<span className='text-red-500'>*</span>
												</FormLabel>
												<FormControl>
													<Textarea
														placeholder='‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ...'
														{...field}
														className='py-6'
														disabled={placeOrder.isPending}
													/>
												</FormControl>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Quantity with stepper */}
									<FormField // @ts-ignore
										control={form.control}
										name='quantity'
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													‡¶ï‡ßã‡ßü‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ü‡¶ø <span className='text-red-500'>*</span>
												</FormLabel>
												<div className='grid grid-cols-3 w-full border rounded-xl overflow-hidden'>
													<Button
														type='button'
														variant='ghost'
														className='rounded-none bg-purple-100 hover:bg-purple-200 text-purple-900 font-bold py-6'
														onClick={() =>
															field.onChange(
																Math.max(1, (field.value ?? 1) - 1)
															)
														}
														disabled={
															field?.value === 1 || placeOrder.isPending
														}
													>
														‚ûñ
													</Button>
													<div className='flex items-center justify-center bg-white font-semibold'>
														{field?.value}
													</div>
													<Button
														type='button'
														variant='ghost'
														className='rounded-none bg-purple-100 hover:bg-purple-200 text-purple-900 font-bold py-6'
														onClick={() =>
															field.onChange((field.value ?? 1) + 1)
														}
														disabled={
															field?.value === 4 || placeOrder.isPending
														}
													>
														‚ûï
													</Button>
												</div>
												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Product Code */}
									<FormField // @ts-ignore
										control={form.control}
										name='code'
										render={({ field }) => (
											<FormItem>
												<FormLabel>
													‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡ßã‡¶° <span className='text-red-500'>*</span>
												</FormLabel>

												<FormControl>
													<Input
														disabled={placeOrder.isPending}
														placeholder='‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶®'
														{...field}
														className='py-6'
													/>
												</FormControl>

												<FormMessage />
											</FormItem>
										)}
									/>

									{/* Extra Note (Optional) */}
									<FormField
										// @ts-ignore
										control={form.control}
										name='specialNote'
										render={({ field }) => (
											<FormItem>
												<FormLabel>‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡ßã‡¶ü (‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤)</FormLabel>
												<FormControl>
													<Textarea
														placeholder='‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®'
														{...field}
														className='py-6'
														disabled={placeOrder.isPending}
													/>
												</FormControl>
												<FormMessage />
											</FormItem>
										)}
									/>
									<div className='text-purple-950 bg-white p-4 rounded-xl border border-purple-950 space-y-2'>
										<h2 className='text-lg font-semibold text-center'>
											‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂
										</h2>
										<div className='flex justify-between text-base'>
											<span className='text-lg font-medium'>‡¶è‡¶ï‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø:</span>
											<span className='text-lg font-medium'>
												<span className='font-extrabold'>‡ß≥</span> 900
											</span>
										</div>
										<div className='flex justify-between text-base'>
											<span className='text-lg font-medium'>‡¶ï‡ßã‡ßü‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ü‡¶ø:</span>
											<span className='text-lg font-medium'>
												{form.watch('quantity')}
											</span>
										</div>
										<div className='flex justify-between text-base'>
											<span className='text-lg font-medium'>‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü:</span>
											<span className='font-extrabold'>
												‡ß≥{' '}
												{(form.watch('quantity') === 2 && 100) ||
													(form.watch('quantity') === 3 && 250) ||
													(form.watch('quantity') === 4 && 400) ||
													0.0}
											</span>
										</div>
										<hr className='border-purple-300 my-2' />
										<div className='flex justify-between text-xl font-bold'>
											<span>‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ:</span>
											<span className='font-extrabold'>
												‡ß≥{' '}
												{(form.watch('quantity') === 1 && 900) ||
													(form.watch('quantity') === 2 && 1700) ||
													(form.watch('quantity') === 3 && 2450) ||
													(form.watch('quantity') === 4 && 3200)}
											</span>
										</div>
									</div>

									<Button
										type='submit'
										className='w-full bg-purple-950 text-white font-bold py-7 cursor-pointer text-xl'
										disabled={placeOrder.isPending}
									>
										{placeOrder.isPending ? (
											<Loader2 className='!w-6 !h-6 animate-spin spin-in-180' />
										) : (
											'‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®'
										)}
									</Button>
								</form>
							</Form>
						</CardContent>
					</Card>
				</section>
			</main>
		</div>
	);
}
// ‚úÖ Yup validation schema
const schema = yup.object({
	name: yup.string().required('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®'),
	phone: yup
		.string()
		.required('‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®')
		.matches(/^(?:\+?88)?01[3-9]\d{8}$/, '‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®'),
	address: yup.string().required('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶¶‡¶ø‡¶®'),
	quantity: yup
		.number()
		.typeError('‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®')
		.min(1, '‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß ‡¶ü‡¶ø ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá')
		.required('‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß ‡¶ü‡¶ø ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá'),
	code: yup.string().required('‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶®'),
	extraNote: yup
		.string()
		.transform((val) => (val === '' ? undefined : val)) // üëà fix for optional
		.optional(),
});

type FormValues = {
	name: string;
	phone: string;
	address: string;
	quantity: number;
	code: string;
	specialNote?: string; // üëà ‡¶è‡¶ñ‡¶æ‡¶®‡ßá optional
};

export type ProductDataType = {
	productMainTitle: string;
	productVideoLink: string;
	unitPrice: number;
	priceFor2product: number;
	priceFor3product: number;
	priceFor4product: number;
	mobileNumber: string;
	facebook: string;
	whatsappNumber: string;
	description: string[];
	reviewImages: string[];
};

const priceByQuantity = (quantity: number, productData: ProductDataType) => {
	switch (quantity) {
		case 1:
			return productData?.unitPrice;
		case 2:
			return productData?.priceFor2product;
		case 3:
			return productData?.priceFor3product;
		case 4:
			return productData?.priceFor4product;

		default:
			break;
	}
};
